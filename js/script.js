const API_URL = process.env.NODE_ENV === 'development' 
    ? 'http://localhost:3000' 
    : 'https://gifts-drop.vercel.app/';

// script.js
import { initTelegramAuth, getTestUserData, formatUserData } from './auth.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let balance = 1000;
let canSpin = true;
let activeBonuses = [];
let userDeposits = 0;
let currentUser = null;

// –í –æ–±—ä–µ–∫—Ç–∞—Ö LEVELS –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ bonus
const LEVELS = [
    { level: 1, xpRequired: 0, reward: 0, bonus: "–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤—ã–º –∫–µ–π—Å–∞–º" },
    { level: 2, xpRequired: 100, reward: 50, bonus: "+5% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º" },
    { level: 3, xpRequired: 300, reward: 100, bonus: "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –∫–µ–π—Å–∞–º" },
    { level: 4, xpRequired: 600, reward: 200, bonus: "+1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏–Ω" },
    { level: 5, xpRequired: 1000, reward: 500, bonus: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã" }
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userXP = 0;
let userLevel = 1;

// –ü—Ä–æ–º–æ–∫–æ–¥—ã
const PROMO_CODES = {
    "WELCOME": { amount: 100, used: false },
    "GIFT100": { amount: 100, used: false },
    "BONUS50": { amount: 50, used: false }
};

// –¢–∏–ø—ã –±–æ–Ω—É—Å–æ–≤
const BONUS_TYPES = [
    { 
        type: "deposit", 
        probability: 45,
        variants: [
            { title: "+20% –ö –î–ï–ü–û–ó–ò–¢–£", value: 0.2, icon: "fa-coins", duration: 24 },
            { title: "+15% –ö –î–ï–ü–û–ó–ò–¢–£", value: 0.15, icon: "fa-coins", duration: 12 }
        ]
    },
    { 
        type: "discount", 
        probability: 35,
        variants: [
            { title: "-20% –ù–ê –ö–ï–ô–°–´", value: 0.2, icon: "fa-percentage", duration: 12 },
            { title: "-15% –ù–ê –ö–ï–ô–°–´", value: 0.15, icon: "fa-percentage", duration: 6 }
        ]
    },
    { 
        type: "free", 
        probability: 20,
        variants: [
            { title: "+2 –ü–û–î–ê–†–ö–ê", value: 2, icon: "fa-gift", duration: 0 },
            { title: "+1 –ü–û–î–ê–†–û–ö", value: 1, icon: "fa-gift", duration: 0 }
        ]
    }
];

function initApp() {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    try {
        const authResult = initTelegramAuth();
        
        if (authResult && authResult.data) {
            // –†–µ–∂–∏–º Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            currentUser = formatUserData(authResult.data);
            console.log('Authenticated as Telegram user:', currentUser);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebApp
            if (authResult.webAppInstance) {
                try {
                    authResult.webAppInstance.setHeaderColor('#8a2be2');
                    authResult.webAppInstance.enableClosingConfirmation();
                } catch (e) {
                    console.log('WebApp settings error:', e);
                }
            }
        } else {
            // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            currentUser = formatUserData(getTestUserData());
            console.log('Using test user:', currentUser);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (!document.querySelector('.test-warning')) {
                const warning = document.createElement('div');
                warning.className = 'test-warning';
                warning.textContent = '–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ';
                document.body.prepend(warning);
            }
        }
    } catch (e) {
        console.error('Auth error:', e);
        currentUser = formatUserData(getTestUserData());
    }

    // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateProfile();
    initTheme();
    initRoulette();
    initDepositModal();
    updateActiveBonuses();
    checkAvailableGiveaways();
    initUserLevel();
    loadUserProgress();
    updateLevelSystem();
    initLevelSystem(); // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å 1 —É—Ä–æ–≤–Ω—è
    loadProgress();
    
    // 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
    openTab('cases', document.querySelector('.nav-btn'));
    
    // 4. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setInterval(updateActiveBonuses, 60000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
function initTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateThemeSwitch(savedTheme);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    updateThemeSwitch(newTheme);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º—ã
function updateThemeSwitch(theme) {
    const icon = document.querySelector('.theme-switch-btn i');
    const text = document.querySelector('.theme-switch-btn span');
    
    if (theme === 'dark') {
        icon.className = 'fas fa-sun';
        text.textContent = '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
    } else {
        icon.className = 'fas fa-moon';
        text.textContent = '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function updateProfile() {
    if (!currentUser) return;
    
    const userName = document.getElementById('userName');
    const avatar = document.getElementById('userAvatar');
    const placeholder = document.getElementById('avatarPlaceholder');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userName.textContent = currentUser.name;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
    if (currentUser.photo) {
        placeholder.style.display = 'none';
        avatar.style.backgroundImage = `url(${currentUser.photo})`;
        avatar.style.backgroundSize = 'cover';
        avatar.style.backgroundPosition = 'center';
    } else {
        placeholder.style.display = 'flex';
        avatar.style.backgroundImage = 'none';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        const initials = currentUser.name.split(' ')
            .map(n => n[0])
            .join('')
            .toUpperCase();
        placeholder.textContent = initials;
    }

    updateUserStats();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateUserStats() {
    const openedCases = document.getElementById('openedCases');
    const bestPrize = document.getElementById('bestPrize');
    
    if (openedCases) {
        openedCases.textContent = Math.abs(currentUser.id % 20);
    }
    
    if (bestPrize) {
        const prizes = ['–û–±—ã—á–Ω—ã–π', '–†–µ–¥–∫–∏–π', '–≠–ø–∏—á–µ—Å–∫–∏–π', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'];
        bestPrize.textContent = prizes[Math.floor(currentUser.id % 4)];
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ XP
function calculateXPForLevel(level) {
    if (level <= 1) return 0;
    return LEVELS[level - 1]?.xpRequired || 0;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π
function initLevelSystem() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    userLevel = 1;
    userXP = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateLevelDisplay();
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é addXP
function addXP(amount) {
    if (amount <= 0) return;
    
    userXP += amount;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    let leveledUp = false;
    while (userLevel < LEVELS.length && userXP >= LEVELS[userLevel].xpRequired) {
        userLevel++;
        leveledUp = true;
    }
    
    if (leveledUp) {
        showLevelUpModal(LEVELS[userLevel - 1]);
        applyLevelBonus(userLevel);
    }
    
    updateLevelDisplay();
    saveProgress();
}

function checkLevelUp() {
    const currentLevelData = LEVELS[userLevel - 1];
    const nextLevelData = LEVELS[userLevel];
    
    if (nextLevelData && userXP >= nextLevelData.xpRequired) {
        userLevel++;
        balance += nextLevelData.reward;
        
        showLevelUpModal(nextLevelData);
        applyLevelBonus(userLevel);
        saveUserProgress();
        updateLevelSystem();
        
        return true;
    }
    return false;
}

function applyLevelBonus(level) {
    switch(level) {
        case 2:
            // +5% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º
            break;
        case 3:
            // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –∫–µ–π—Å—ã
            break;
        case 4:
            dailySpins++;
            break;
        case 5:
            // –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
            break;
    }
}

function showLevelUpModal(levelData) {
    const modal = document.getElementById('levelUpModal');
    const levelText = modal.querySelector('.level-text');
    const rewardText = modal.querySelector('.reward-text');
    const bonusText = modal.querySelector('.bonus-text');
    
    levelText.textContent = `–£—Ä–æ–≤–µ–Ω—å ${levelData.level}!`;
    rewardText.textContent = `–ù–∞–≥—Ä–∞–¥–∞: ${levelData.reward} ü™ô`;
    bonusText.textContent = `–ë–æ–Ω—É—Å: ${levelData.bonus}`;
    
    modal.classList.remove('hidden');
}

function closeLevelUpModal() {
    document.getElementById('levelUpModal').classList.add('hidden');
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateLevelSystem() {
    const currentLevelData = LEVELS[userLevel - 1];
    const nextLevelData = LEVELS[userLevel] || currentLevelData;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    const levelElement = document.getElementById('userLevel');
    if (levelElement) {
        levelElement.textContent = userLevel;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progress = nextLevelData 
        ? (userXP - currentLevelData.xpRequired) / 
          (nextLevelData.xpRequired - currentLevelData.xpRequired) * 100
        : 100;
    
    document.getElementById('levelProgress').style.width = `${progress}%`;
    document.getElementById('xpText').textContent = 
        `${userXP}/${nextLevelData.xpRequired} XP`;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateLevelDisplay() {
    const currentLevel = LEVELS[userLevel - 1];
    const nextLevel = LEVELS[userLevel] || currentLevel;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É —É—Ä–æ–≤–Ω—è
    document.getElementById('userLevel').textContent = userLevel;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressPercent = nextLevel 
        ? ((userXP - currentLevel.xpRequired) / 
          (nextLevel.xpRequired - currentLevel.xpRequired)) * 100
        : 100;
    
    document.getElementById('levelProgress').style.width = `${progressPercent}%`;
    document.getElementById('xpDisplay').textContent = 
        `${userXP}/${nextLevel.xpRequired} XP`;
}

function saveUserProgress() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.CloudStorage.setItem('userProgress', JSON.stringify({
            xp: userXP,
            level: userLevel,
            spins: dailySpins
        }));
    } else {
        localStorage.setItem('userProgress', JSON.stringify({
            xp: userXP,
            level: userLevel,
            spins: dailySpins
        }));
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function saveProgress() {
    const progressData = {
        level: userLevel,
        xp: userXP
    };
    
    localStorage.setItem('userProgress', JSON.stringify(progressData));
}

function loadUserProgress() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const levelElement = document.getElementById('userLevel');
    const uiLevel = levelElement ? parseInt(levelElement.textContent) : 1;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let data = null;
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        data = Telegram.WebApp.CloudStorage.getItem('userProgress');
    } else {
        data = localStorage.getItem('userProgress');
    }
    
    if (data) {
        try {
            const parsed = JSON.parse(data);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
            userLevel = Math.max(parsed.level || 1, uiLevel);
            userXP = Math.max(parsed.xp || 0, calculateXPForLevel(userLevel));
            dailySpins = parsed.spins || 1;
        } catch (e) {
            console.error('Error loading progress:', e);
            userLevel = uiLevel;
            userXP = calculateXPForLevel(userLevel);
        }
    } else {
        userLevel = uiLevel;
        userXP = calculateXPForLevel(userLevel);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadProgress() {
    const savedData = localStorage.getItem('userProgress');
    if (savedData) {
        try {
            const { level, xp } = JSON.parse(savedData);
            userLevel = Math.min(level, LEVELS.length);
            userXP = Math.max(xp, LEVELS[userLevel - 1].xpRequired);
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", e);
        }
    }
    updateLevelDisplay();
}

function initUserLevel() {
    const levelElement = document.getElementById('userLevel');
    if (levelElement) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const currentLevel = parseInt(levelElement.textContent) || 1;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        userLevel = currentLevel;
        userXP = calculateXPForLevel(currentLevel);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateLevelSystem();
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function openTab(tabName, clickedElement) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(tabName).classList.add('active');
    
    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
    if (clickedElement) {
        clickedElement.classList.add('active');
    } else {
        document.querySelector(`.nav-btn[onclick*="${tabName}"]`).classList.add('active');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
function initRoulette() {
    const track = document.getElementById('rouletteTrack');
    track.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    for (let i = 0; i < 20; i++) {
        const type = getRandomBonusType();
        const bonus = getRandomVariant(type);
        
        const item = document.createElement('div');
        item.className = `roulette-item ${type}`;
        item.innerHTML = `<i class="fas ${bonus.icon}"></i>`;
        item.dataset.type = type;
        item.dataset.title = bonus.title;
        item.dataset.value = bonus.value;
        item.dataset.duration = bonus.duration;
        
        track.appendChild(item);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–æ–Ω—É—Å–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
function getRandomBonusType() {
    const random = Math.random() * 100;
    let cumulative = 0;
    
    for (const type of BONUS_TYPES) {
        cumulative += type.probability;
        if (random <= cumulative) return type.type;
    }
    
    return 'deposit';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –±–æ–Ω—É—Å–∞
function getRandomVariant(type) {
    const bonusType = BONUS_TYPES.find(t => t.type === type);
    return bonusType.variants[Math.floor(Math.random() * bonusType.variants.length)];
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏
function spinRoulette() {
    if (!canSpin || dailySpins <= 0) {
        showToast("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤", "error");
        return;
    }

    addXP(15);
    
    dailySpins--;
    saveUserProgress();
    updateLevelSystem();

    if (!canSpin) {
        showToast("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π —Å–ø–∏–Ω", "error");
        return;
    }
    
    if (balance < 100) {
        showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏–Ω–∞", "error");
        return;
    }
    
    updateBalance(-100);
    canSpin = false;
    document.querySelector('.spin-button').disabled = true;
    
    const track = document.getElementById('rouletteTrack');
    const items = document.querySelectorAll('.roulette-item');
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–æ–Ω—É—Å —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    const targetType = getRandomBonusType();
    const targetItems = Array.from(items).filter(item => item.dataset.type === targetType);
    const targetItem = targetItems[Math.floor(Math.random() * targetItems.length)];
    const itemIndex = Array.from(items).indexOf(targetItem);
    
    // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const itemWidth = 110;
    const stopPosition = -(itemIndex * itemWidth) + (window.innerWidth / 2 - itemWidth / 2);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    track.style.transition = 'transform 3s cubic-bezier(0.25, 0.1, 0.25, 1)';
    track.style.transform = `translateX(${stopPosition}px)`;
    
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        const wonBonus = {
            title: targetItem.dataset.title,
            type: targetItem.dataset.type,
            value: parseFloat(targetItem.dataset.value),
            duration: parseInt(targetItem.dataset.duration),
            icon: targetItem.querySelector('i').className
        };
        
        activateBonus(wonBonus);
        showWinModal(wonBonus);
        
        // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            track.style.transition = 'none';
            initRoulette();
            canSpin = true;
            document.querySelector('.spin-button').disabled = false;
        }, 500);
    }, 3000);
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ–Ω—É—Å–∞
function activateBonus(bonus) {
    if (bonus.type === 'free') {
        showToast(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${bonus.value} –ø–æ–¥–∞—Ä–∫–∞!`, "success");
    }
    
    if (bonus.duration > 0) {
        bonus.endTime = Date.now() + bonus.duration * 3600000;
        activeBonuses.push(bonus);
        updateActiveBonuses();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
function updateActiveBonuses() {
    const now = Date.now();
    activeBonuses = activeBonuses.filter(b => b.endTime > now);
    
    const container = document.getElementById('activeBonusesList');
    
    if (activeBonuses.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-box-open"></i>
                <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = '';
    activeBonuses.forEach(bonus => {
        const hoursLeft = Math.ceil((bonus.endTime - now) / 3600000);
        
        const bonusElement = document.createElement('div');
        bonusElement.className = 'bonus-item';
        bonusElement.innerHTML = `
            <div class="bonus-icon ${bonus.type}">
                <i class="${bonus.icon}"></i>
            </div>
            <div class="bonus-info">
                <div>${bonus.title}</div>
                <div class="bonus-timer">–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${hoursLeft}—á</div>
            </div>
        `;
        
        container.appendChild(bonusElement);
    });
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
function showWinModal(bonus) {
    const modal = document.getElementById('winModal');
    const icon = document.getElementById('winIcon');
    const title = document.getElementById('winTitle');
    const desc = document.getElementById('winDescription');
    
    icon.className = `win-icon ${bonus.type}`;
    icon.innerHTML = `<i class="${bonus.icon}"></i>`;
    title.textContent = "–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!";
    desc.textContent = bonus.title;
    
    modal.classList.remove('hidden');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeWinModal() {
    document.getElementById('winModal').classList.add('hidden');
}

// –£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
function joinGiveaway(minAmount) {
    if (userDeposits >= minAmount) {
        showToast(`–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!`, 'success');
    } else {
        showToast(`–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ ${minAmount} ü™ô –¥–ª—è —É—á–∞—Å—Ç–∏—è`, 'error');
        openDepositModal();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
function initDepositModal() {
    const tonInput = document.getElementById('tonAmount');
    const starsInput = document.getElementById('starsAmount');
    
    tonInput.addEventListener('input', () => {
        const ton = parseFloat(tonInput.value) || 0;
        const giftcoin = Math.floor(ton * 200);
        document.getElementById('tonGiftcoin').textContent = giftcoin;
    });
    
    starsInput.addEventListener('input', () => {
        const stars = parseInt(starsInput.value) || 0;
        document.getElementById('starsGiftcoin').textContent = stars;
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
function switchDepositTab(tabName) {
    document.querySelectorAll('.deposit-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.querySelectorAll('.deposit-tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    document.querySelector(`.deposit-tab[onclick*="${tabName}"]`).classList.add('active');
    document.querySelector(`.deposit-tab-content.${tabName}`).classList.add('active');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ TON
function processTonDeposit() {
    const tonAmount = parseFloat(document.getElementById('tonAmount').value);
    const promoCode = document.getElementById('tonPromoCode').value.toUpperCase();
    
    if (!tonAmount || tonAmount < 0.5) {
        showToast("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 0.5 TON", "error");
        return;
    }
    
    let giftcoinAmount = tonAmount * 200;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω
    if (promoCode && PROMO_CODES[promoCode] && !PROMO_CODES[promoCode].used) {
        giftcoinAmount += PROMO_CODES[promoCode].amount;
        PROMO_CODES[promoCode].used = true;
        showToast(`–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω! +${PROMO_CODES[promoCode].amount} GiftCoin`, "success");
    }
    
    updateBalance(giftcoinAmount);
    userDeposits += giftcoinAmount;
    showToast(`–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${giftcoinAmount} GiftCoin`, "success");
    closeDepositModal();
    checkAvailableGiveaways();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤–µ–∑–¥–∞–º–∏
function processStarsDeposit() {
    const starsAmount = parseInt(document.getElementById('starsAmount').value);
    const promoCode = document.getElementById('starsPromoCode').value.toUpperCase();
    
    if (!starsAmount || starsAmount < 25) {
        showToast("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ - 25", "error");
        return;
    }
    
    let giftcoinAmount = starsAmount;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω
    if (promoCode && PROMO_CODES[promoCode] && !PROMO_CODES[promoCode].used) {
        giftcoinAmount += PROMO_CODES[promoCode].amount;
        PROMO_CODES[promoCode].used = true;
        showToast(`–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω! +${PROMO_CODES[promoCode].amount} GiftCoin`, "success");
    }
    
    updateBalance(giftcoinAmount);
    userDeposits += giftcoinAmount;
    showToast(`–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${giftcoinAmount} GiftCoin`, "success");
    closeDepositModal();
    checkAvailableGiveaways();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
function openDepositModal() {
    document.getElementById('depositModal').classList.remove('hidden');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
function closeDepositModal() {
    document.getElementById('depositModal').classList.add('hidden');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
function checkAvailableGiveaways() {
    const giveawayCards = document.querySelectorAll('.giveaway-card');
    
    giveawayCards.forEach(card => {
        const minDeposit = parseInt(card.dataset.minDeposit);
        const button = card.querySelector('.giveaway-button');
        
        button.disabled = userDeposits < minDeposit;
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function updateBalance(amount) {
    balance += amount;
    document.querySelectorAll('.balance-amount').forEach(el => {
        el.textContent = balance;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        el.style.transform = 'scale(1.2)';
        el.style.color = amount > 0 ? 'var(--success)' : 'var(--danger)';
        setTimeout(() => {
            el.style.transform = 'scale(1)';
            el.style.color = '';
        }, 300);
    });
}

function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : 
                         type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
        ${message}
    `;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.add('fade-out');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
function initTelegramWebApp() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
    }
}

// –ü—Ä–∏–º–µ—Ä: –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
async function openCase(caseType) {
    try {
        const response = await fetch(`${API_URL}/api/cases/open`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_id: currentUser.id,
                case_type: caseType
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            updateBalance(data.new_balance - balance);
            showToast(`–ö–µ–π—Å "${caseType}" –æ—Ç–∫—Ä—ã—Ç! –ü–æ–ª—É—á–µ–Ω–æ: ${data.prize_description}`, "success");
            
            if (data.leveled_up) {
                showLevelUpModal(data.current_level);
            }
        } else {
            showToast(data.msg || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞", "error");
        }
    } catch (error) {
        console.error('Error:', error);
        showToast("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "error");
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è HTML
window.initApp = initApp;
window.openTab = openTab;
window.toggleTheme = toggleTheme;
window.spinRoulette = spinRoulette;
window.closeWinModal = closeWinModal;
window.joinGiveaway = joinGiveaway;
window.switchDepositTab = switchDepositTab;
window.processTonDeposit = processTonDeposit;
window.processStarsDeposit = processStarsDeposit;
window.openDepositModal = openDepositModal;
window.closeDepositModal = closeDepositModal;
window.openCase = openCase;
window.closeLevelUpModal = closeLevelUpModal;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initApp);