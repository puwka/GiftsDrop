// ==================== API Functions ====================
const API_URL = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'
    ? 'http://localhost:3000' 
    : 'https://gifts-drop.vercel.app';

async function apiRequest(endpoint, method = 'GET', data = null) {
    try {
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
            },
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(`${API_URL}/api${endpoint}`, options);
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => null);
            throw new Error(errorData?.error || `HTTP error! status: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error('API request failed:', error);
        throw error;
    }
}

// ==================== User Management ====================
let currentUser = null;
let balance = 0;
let userLevel = 1;
let userXP = 0;
let wonItem = null;

async function authenticateUser(userData) {
    try {
        const response = await apiRequest('/users/auth', 'POST', {
            telegram_id: userData.id,
            username: userData.username,
            first_name: userData.first_name,
            last_name: userData.last_name,
            photo_url: userData.photo,
            language_code: userData.language
        });
        
        if (response.success) {
            currentUser = response.user;
            balance = response.balance || 0;
            userLevel = response.level || 1;
            userXP = response.xp || 0;
            return true;
        }
        return false;
    } catch (error) {
        console.error('Authentication failed:', error);
        return false;
    }
}

async function updateBalance(amount, type = 'deposit', description = '') {
    try {
        const response = await apiRequest('/users/balance', 'POST', {
            user_id: currentUser.id,
            amount: amount,
            type: type,
            description: description
        });
        
        if (response.success) {
            balance = response.new_balance;
            localStorage.setItem('userBalance', balance); // –°–æ—Ö—Ä–∞–Ω—è–µ–º
            updateBalanceDisplay();
            return true;
        }
        return false;
    } catch (error) {
        console.error('Balance update failed:', error);
        showToast(error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", "error");
        return false;
    }
}

async function getTransactions() {
    try {
        const response = await apiRequest(`/users/transactions/${currentUser.id}`);
        return response.transactions || [];
    } catch (error) {
        console.error('Failed to get transactions:', error);
        return [];
    }
}

// ==================== UI Functions ====================
function updateBalanceDisplay() {
    document.querySelectorAll('.balance-amount').forEach(el => {
        el.textContent = balance;
    });
}

function updateProfile() {
    if (!currentUser) return;
    
    const userName = document.getElementById('userName');
    const avatar = document.getElementById('userAvatar');
    const placeholder = document.getElementById('avatarPlaceholder');

    if (userName) userName.textContent = currentUser.name || currentUser.first_name;
    
    if (avatar && placeholder) {
        if (currentUser.photo_url) {
            placeholder.style.display = 'none';
            avatar.style.backgroundImage = `url(${currentUser.photo_url})`;
            avatar.style.backgroundSize = 'cover';
            avatar.style.backgroundPosition = 'center';
        } else {
            placeholder.style.display = 'flex';
            avatar.style.backgroundImage = 'none';
            
            const initials = (currentUser.first_name?.[0] || '') + (currentUser.last_name?.[0] || '');
            placeholder.textContent = initials.toUpperCase();
        }
    }
}

function updateLevelDisplay() {
    const levelElement = document.getElementById('userLevel');
    const xpElement = document.getElementById('xpDisplay');
    
    if (levelElement) levelElement.textContent = userLevel;
    if (xpElement) xpElement.textContent = `${userXP}/100 XP`;
}

// ==================== Tab Navigation ====================
function openTab(tabName, clickedElement) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tabName —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!tabName) {
        console.error('Tab name is undefined');
        return;
    }

    // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const tab = document.getElementById(tabName);
    if (!tab) {
        console.error(`Tab with id ${tabName} not found`);
        return;
    }
    tab.classList.add('active');
    
    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
    const button = clickedElement || document.querySelector(`.nav-btn[data-tab="${tabName}"]`);
    if (button) {
        button.classList.add('active');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    if (tabName === 'profile') {
        loadProfileData();
    }
}

async function loadProfileData() {
    try {
        const container = document.getElementById('transactionsList');
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
        
        const transactions = await getTransactions();
        updateTransactionsList(transactions);
    } catch (error) {
        console.error('Failed to load profile data:', error);
        showToast("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", "error");
    }
}

function updateTransactionsList(transactions) {
    const container = document.getElementById('transactionsList');
    if (!container) return;

    if (transactions.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-exchange-alt"></i>
                <p>–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
            </div>
        `;
        return;
    }

    container.innerHTML = transactions.map(tx => `
        <div class="transaction-item ${tx.type}">
            <div class="transaction-icon">
                <i class="fas ${
                    tx.type === 'deposit' ? 'fa-coins' : 
                    tx.type === 'bonus' ? 'fa-gift' : 'fa-exchange-alt'
                }"></i>
            </div>
            <div class="transaction-info">
                <div class="transaction-description">${tx.description || tx.type}</div>
                <div class="transaction-date">${new Date(tx.created_at).toLocaleString()}</div>
            </div>
            <div class="transaction-amount ${tx.amount >= 0 ? 'positive' : 'negative'}">
                ${tx.amount >= 0 ? '+' : ''}${tx.amount} ü™ô
            </div>
        </div>
    `).join('');
}

function navigateTo(url) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    if (currentUser) {
        localStorage.setItem('userBalance', balance);
    }
    
    // –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à (–Ω–∞–ø—Ä–∏–º–µ—Ä, #bonuses), –¥–µ–ª–∞–µ–º –ø–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
    if (url.includes('#')) {
        const [base, hash] = url.split('#');
        window.location.href = base;
        
        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫—Ä–æ–ª–ª–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É
        window.addEventListener('load', () => {
            const section = document.getElementById(hash);
            if (section) {
                section.scrollIntoView({ behavior: 'smooth' });
            }
        });
    } else {
        window.location.href = url;
    }
}

// ==================== Deposit Functions ====================
function openDepositModal() {
    const modal = document.getElementById('depositModal');
    if (modal) modal.classList.remove('hidden');
}

function closeDepositModal() {
    const modal = document.getElementById('depositModal');
    if (modal) modal.classList.add('hidden');
}

function switchDepositTab(tabName) {
    document.querySelectorAll('.deposit-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.querySelectorAll('.deposit-tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    const tab = document.querySelector(`.deposit-tab[data-tab="${tabName}"]`);
    const content = document.querySelector(`.deposit-tab-content.${tabName}`);
    
    if (tab) tab.classList.add('active');
    if (content) content.classList.add('active');
}

async function processTonDeposit() {
    const tonAmount = parseFloat(document.getElementById('tonAmount').value);
    
    if (!tonAmount || tonAmount < 0.5) {
        showToast("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 0.5 TON", "error");
        return;
    }
    
    const giftcoinAmount = Math.floor(tonAmount * 200);
    const success = await updateBalance(
        giftcoinAmount,
        'deposit',
        `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON (${tonAmount} TON)`
    );
    
    if (success) {
        showToast(`–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${giftcoinAmount} GiftCoin`, "success");
        closeDepositModal();
    }
}

async function processStarsDeposit() {
    const starsAmount = parseInt(document.getElementById('starsAmount').value);
    
    if (!starsAmount || starsAmount < 25) {
        showToast("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ - 25", "error");
        return;
    }
    
    const success = await updateBalance(
        starsAmount,
        'deposit',
        '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥–∞–º–∏'
    );
    
    if (success) {
        showToast(`–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${starsAmount} GiftCoin`, "success");
        closeDepositModal();
    }
}

// ==================== Notification System ====================
function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : 
                         type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
        ${message}
    `;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.add('fade-out');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤ script.js
let currentCase = null;
let caseItems = [];
let selectedCount = 1;
let isDemoMode = false;

async function loadCasePage(caseId) {
    try {
        console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–∞ ID: ${caseId}`);
        const response = await apiRequest(`/users/case/${caseId}`);
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (!response.success) throw new Error(response.error || 'Case not found');
        
        currentCase = response.case;
        caseItems = response.items || [];
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', caseItems.length);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–µ–π—Å–∞
        renderCasePage();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–∞:', error);
        showToast("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–∞", "error");
        setTimeout(() => window.location.href = 'index.html', 2000);
    }
}

function showLoading(show) {
    const loader = document.getElementById('loader');
    if (loader) loader.style.display = show ? 'block' : 'none';
}

function renderCasePage() {
    if (!currentCase) return;
    
    console.log('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–µ–π—Å–∞:', currentCase);

    const staticView = document.getElementById('caseStaticView');
    if (staticView) {
        staticView.querySelector('.case-image').style.backgroundImage = 
            currentCase.image_url ? `url('${currentCase.image_url}')` : '';
        staticView.querySelector('.case-image i').style.display = 
            currentCase.image_url ? 'none' : 'block';
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
    document.getElementById('casePrice').textContent = `${currentCase.price} ü™ô`;
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const shuffledItems = [...caseItems].sort(() => Math.random() - 0.5);
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ (—Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏)
    const itemsContainer = document.getElementById('caseItemsTrack');
    if (itemsContainer) {
        itemsContainer.innerHTML = shuffledItems.map(item => `
            <div class="roulette-item ${item.rarity || 'common'}" 
                 style="background-image: url('${item.image_url || 'img/default-item.png'}')">
            </div>
        `).join('');
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Å–µ—Ç–∫–∏ –≤–Ω–∏–∑—É (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    const itemsGrid = document.getElementById('caseItemsGrid');
    if (itemsGrid) {
        itemsGrid.innerHTML = caseItems.map(item => `
            <div class="case-item" data-rarity="${item.rarity}">
                <div class="item-image" style="background-image: url('${item.image_url || 'img/default-item.png'}')">
                    ${!item.image_url ? `<i class="fas fa-box-open"></i>` : ''}
                </div>
                <div class="item-info">
                    <h4>${item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}</h4>
                    <p class="item-rarity ${item.rarity || 'common'}">
                        ${getRarityName(item.rarity)}
                    </p>
                    <p class="item-chance">
                        ${item.drop_chance ? `–®–∞–Ω—Å: ${item.drop_chance}%` : ''}
                    </p>
                </div>
            </div>
        `).join('');
    }
    
    console.log('–ü—Ä–µ–¥–º–µ—Ç—ã –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ã');
}

function goBack() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ URL –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    const balanceParam = `balance=${balance}`;
    const url = `index.html?${balanceParam}`;
    
    // –ï—Å–ª–∏ –≤ Telegram WebApp - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ API
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        window.history.back();
    } else {
        window.location.href = url;
    }
}

function getRarityName(rarity) {
    const names = {
        'common': '–û–±—ã—á–Ω—ã–π',
        'rare': '–†–µ–¥–∫–∏–π',
        'epic': '–≠–ø–∏—á–µ—Å–∫–∏–π',
        'legendary': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
    };
    return names[rarity] || rarity;
}

function updateOpenButtons() {
    const demoBtn = document.getElementById('demoOpenBtn');
    const openBtn = document.getElementById('openCaseBtn');
    const quickOpenBtn = document.getElementById('quickOpenBtn');
    
    if (isDemoMode) {
        demoBtn.classList.add('active');
        openBtn.classList.remove('active');
        quickOpenBtn.classList.remove('active');
    } else {
        demoBtn.classList.remove('active');
        openBtn.classList.add('active');
        quickOpenBtn.classList.add('active');
    }
    
    document.getElementById('openCount').textContent = selectedCount;
    document.getElementById('totalCost').textContent = isDemoMode ? 0 : currentCase.price * selectedCount;
}

// –í script.js –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é openCase:
async function openCase() {
    if (!currentUser || !currentCase) {
        showToast("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", "error");
        return;
    }

    const button = document.getElementById('openCaseBtn');
    if (button) button.disabled = true;

    try {
        showLoading(true);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∏—Ö —à–∞–Ω—Å–∞–º–∏ –∏–∑ –ë–î
        const response = await apiRequest(`/users/case/${currentCase.id}/items`);
        if (!response.success) throw new Error(response.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤");
        
        const itemsWithChances = response.items;
        const winningItem = selectItemWithChance(itemsWithChances);
        wonItem = winningItem;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏
        const itemsTrack = document.getElementById('caseItemsTrack');
        const staticView = document.getElementById('caseStaticView');
        const rouletteView = document.getElementById('caseRouletteView');
        
        // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        itemsTrack.style.transition = 'none';
        itemsTrack.style.transform = 'translateX(0)';
        void itemsTrack.offsetWidth;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞
        staticView.classList.add('hidden');
        rouletteView.classList.remove('hidden');
        
        // –°–æ–∑–¥–∞–µ–º —Ä—É–ª–µ—Ç–∫—É —Å 3 —Ü–∏–∫–ª–∞–º–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ + –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –≤ –∫–æ–Ω—Ü–µ
        const loopCount = 3;
        let rouletteItems = [];
        for (let i = 0; i < loopCount; i++) {
            rouletteItems.push(...[...itemsWithChances].sort(() => Math.random() - 0.5));
        }
        rouletteItems.push(winningItem);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ä—É–ª–µ—Ç–∫—É
        itemsTrack.innerHTML = rouletteItems.map(item => `
            <div class="roulette-item ${item.rarity || 'common'}" 
                 data-item-id="${item.id}"
                 style="background-image: url('${item.image_url || 'img/default-item.png'}')">
            </div>
        `).join('');

        await new Promise(resolve => requestAnimationFrame(resolve));
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
        const itemWidth = 120;
        const trackWidth = rouletteItems.length * itemWidth;
        const stopPosition = trackWidth - (window.innerWidth / 2) - (itemWidth / 2);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
        itemsTrack.style.transition = 'transform 5s cubic-bezier(0.08, 0.65, 0.25, 1)';
        itemsTrack.style.transform = `translateX(-${stopPosition}px)`;
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 5200));
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        const winningElement = itemsTrack.querySelector(`[data-item-id="${winningItem.id}"]`);
        if (winningElement) {
            winningElement.classList.add('highlighted');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
        showWinModal(winningItem);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –Ω–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º)
        if (!isDemoMode) {
            balance -= currentCase.price * selectedCount;
            updateBalanceDisplay();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞ –≤ –ë–î
            const result = await apiRequest('/users/open-case', 'POST', {
                user_id: currentUser.id,
                case_id: currentCase.id,
                item_id: winningItem.id,
                is_demo: isDemoMode
            });
            
            if (!result.success) throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
        showToast(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞", "error");
    } finally {
        showLoading(false);
        if (button) button.disabled = false;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥
        setTimeout(() => {
            const staticView = document.getElementById('caseStaticView');
            const rouletteView = document.getElementById('caseRouletteView');
            const itemsTrack = document.getElementById('caseItemsTrack');
            
            staticView.classList.remove('hidden');
            rouletteView.classList.add('hidden');
            
            itemsTrack.style.transition = 'none';
            itemsTrack.style.transform = 'translateX(0)';
            void itemsTrack.offsetWidth;
        }, 1500);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º —à–∞–Ω—Å–æ–≤
function selectItemWithChance(items) {
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏
    let cumulativeChance = 0;
    const itemsWithRanges = items.map(item => {
        const start = cumulativeChance;
        cumulativeChance += item.adjusted_chance;
        return {
            ...item,
            start,
            end: cumulativeChance
        };
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ –æ–±—â–µ–π —Å—É–º–º—ã —à–∞–Ω—Å–æ–≤
    const random = Math.random() * cumulativeChance;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ø–∞–ª–æ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
    const selectedItem = itemsWithRanges.find(item => 
        random >= item.start && random < item.end
    );
    
    return selectedItem || items[0]; // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
}

function getItemCenterPosition(itemIndex, itemWidth) {
    const viewportCenter = window.innerWidth / 2;
    return (itemIndex * itemWidth) + (itemWidth / 2) - viewportCenter;
}

function calculateStopPosition(items, winningIndex, itemWidth) {
    const visibleItems = Math.ceil(window.innerWidth / itemWidth);
    const paddingItems = Math.floor(visibleItems / 2);
    
    // –ü–æ–∑–∏—Ü–∏—è, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
    return (winningIndex + paddingItems) * itemWidth - (window.innerWidth / 2) + (itemWidth / 2);
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
function showWinModal(item) {
    const modal = document.getElementById('winModal');
    if (!modal) return;

    const container = document.getElementById('wonItemContainer');
    const sellPriceElement = document.getElementById('sellPrice');
    
    const rarityClass = item.rarity || 'common';
    const rarityName = getRarityName(item.rarity);
    const sellPrice = Math.floor((item.price || 0) * 0.7);
    
    container.innerHTML = `
        <div class="won-item" data-rarity="${rarityClass}">
            <div class="item-image">
                ${item.image_url ? 
                    `<img src="${item.image_url}" alt="${item.name}" loading="lazy">` : 
                    `<i class="fas fa-gift"></i>`}
            </div>
            <div class="item-info">
                <h4 class="item-name">${item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}</h4>
                <p class="item-rarity ${rarityClass}">${rarityName}</p>
                ${item.price ? `<p class="item-price">–¶–µ–Ω–∞: ${item.price} ü™ô</p>` : ''}
                ${item.drop_chance ? `<p class="item-chance">–®–∞–Ω—Å: ${item.drop_chance}%</p>` : ''}
            </div>
        </div>
    `;
    
    if (sellPriceElement) {
        sellPriceElement.textContent = sellPrice;
    }
    
    modal.classList.remove('hidden');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (rarityClass === 'legendary') {
        const wonItem = container.querySelector('.won-item');
        wonItem.style.animation = 'pulse 2s infinite';
    }
}

async function keepItem() {
    const modal = document.getElementById('winModal');
    if (modal) modal.classList.add('hidden');
}

async function sellItem() {
    const modal = document.getElementById('winModal');
    if (!modal || !wonItem) return;
    
    const sellPrice = Math.floor((wonItem.price || 0) * 0.7);
    
    try {
        const success = await updateBalance(
            sellPrice,
            'sell',
            `–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: ${wonItem.name}`
        );
        
        if (success) {
            showToast(`–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω –∑–∞ ${sellPrice} ü™ô`, "success");
            modal.classList.add('hidden');
        }
    } catch (error) {
        console.error('Sell item error:', error);
        showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞", "error");
    }
}

function showCaseResult(item) {
    // 1. –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.getElementById('caseResultContainer');
    if (!container) {
        console.error('Result container not found');
        return;
    }
    
    // 2. –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
    const rarityClass = item.rarity || 'common';
    const rarityName = getRarityName(item.rarity);
    
    container.innerHTML = `
        <div class="won-item ${rarityClass}">
            <div class="item-image">
                ${item.image_url ? 
                    `<img src="${item.image_url}" alt="${item.name}" loading="lazy">` : 
                    `<i class="fas fa-gift"></i>`}
            </div>
            <div class="item-details">
                <h3>${item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}</h3>
                <p class="rarity-badge ${rarityClass}">${rarityName}</p>
                ${item.price ? `<p class="item-price">–¶–µ–Ω–∞: ${item.price} ü™ô</p>` : ''}
            </div>
        </div>
    `;
    
    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    document.getElementById('caseOpenSection').classList.add('hidden');
    document.getElementById('caseResultSection').classList.remove('hidden');
    
    // 4. –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (rarityClass === 'legendary') {
        container.querySelector('.won-item').classList.add('animate-pulse');
    }
}

function toggleDemoMode() {
    isDemoMode = !isDemoMode;
    updateOpenButtons();
}

function changeCount(change) {
    selectedCount = Math.max(1, Math.min(3, selectedCount + change));
    updateOpenButtons();
}

function backToCase() {
    document.getElementById('caseOpenSection').classList.remove('hidden');
    document.getElementById('caseResultsSection').classList.add('hidden');
}

function initCaseCategories() {
    const categoryBtns = document.querySelectorAll('.category-btn');
    const caseCategories = document.querySelectorAll('.case-category');
    
    categoryBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            categoryBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            caseCategories.forEach(cat => cat.classList.remove('show'));
            
            const category = btn.dataset.category;
            document.querySelector(`.case-category.${category}`).classList.add('show');
            
            // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞—á–∞–ª—É
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoryCounts = {
        all: document.querySelectorAll('.case-category.all .case-card').length,
        free: document.querySelectorAll('.case-category.free .case-card').length,
        branded: document.querySelectorAll('.case-category.branded .case-card').length,
        exclusive: document.querySelectorAll('.case-category.exclusive .case-card').length,
        farm: document.querySelectorAll('.case-category.farm .case-card').length
    };

    categoryBtns.forEach(btn => {
        const count = categoryCounts[btn.dataset.category] || 0;
        const countSpan = btn.querySelector('.category-count') || document.createElement('span');
        countSpan.className = 'category-count';
        countSpan.textContent = count;
        
        if (!btn.querySelector('.category-count')) {
            btn.appendChild(countSpan);
        }
    });
}

// ==================== Initialization ====================
async function initApp() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ URL (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const urlParams = new URLSearchParams(window.location.search);
        const urlBalance = urlParams.get('balance');
        
        if (urlBalance) {
            balance = parseInt(urlBalance);
            localStorage.setItem('userBalance', balance); // –î—É–±–ª–∏—Ä—É–µ–º –≤ localStorage
        } else {
            // –ï—Å–ª–∏ –≤ URL –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ localStorage
            const savedBalance = localStorage.getItem('userBalance');
            if (savedBalance) balance = parseInt(savedBalance);
        }

        // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...
        const authResult = initTelegramAuth();
        
        if (authResult?.data) {
            const authSuccess = await authenticateUser(authResult.data);
            if (!authSuccess) {
                showToast("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "error");
                return;
            }
        } else {
            // –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            currentUser = getTestUserData();
            balance = balance || 1000; // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –∑–∞–¥–∞–Ω, —Å—Ç–∞–≤–∏–º 1000
            showToast("–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "warning");
        }

        updateProfile();
        updateBalanceDisplay();
        updateLevelDisplay();
        initCaseCategories();
        
        setTimeout(() => openTab('cases'), 0);
        
    } catch (error) {
        console.error('Initialization error:', error);
        showToast("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", "error");
    }
}

function highlightCurrentTab() {
    // –î–ª—è case.html –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω —Ç–∞–± "–ö–µ–π—Å—ã"
    if (window.location.pathname.includes('case.html')) {
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.toggle('active', btn.getAttribute('data-tab') === 'cases');
        });
        return;
    }
    
    // –î–ª—è index.html –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ö—ç—à—É
    const currentTab = window.location.hash.replace('#', '') || 'cases';
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.toggle('active', btn.getAttribute('data-tab') === currentTab);
    });
}

// –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
function closeApp() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.close();
    } else {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –Ω–µ –≤ Telegram
        window.location.href = 'index.html';
    }
}

// ==================== Telegram Auth Helpers ====================
function initTelegramAuth() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        try {
            const webApp = Telegram.WebApp;
            webApp.expand();
            webApp.ready();
            
            if (webApp.initDataUnsafe?.user) {
                return {
                    data: webApp.initDataUnsafe.user,
                    webAppInstance: webApp
                };
            }
        } catch (e) {
            console.error('Telegram auth error:', e);
        }
    }
    return null;
}

function getTestUserData() {
    return {
        id: 999999,
        first_name: "–¢–µ—Å—Ç–æ–≤—ã–π",
        last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        username: "test_user",
        photo_url: "",
        language_code: "ru",
        name: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    };
}

// ==================== Event Listeners ====================
function initEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            openTab(tabName, this);
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    document.querySelector('.deposit-btn')?.addEventListener('click', openDepositModal);
    
    // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª–∫–∞—Ö
    document.querySelector('.modal-button.secondary')?.addEventListener('click', closeDepositModal);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–∞
    document.querySelectorAll('.deposit-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            switchDepositTab(tabName);
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        highlightCurrentTab();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    document.getElementById('depositTonBtn')?.addEventListener('click', processTonDeposit);
    document.getElementById('depositStarsBtn')?.addEventListener('click', processStarsDeposit);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø—Ä–∏ –≤–≤–æ–¥–µ
    document.getElementById('tonAmount')?.addEventListener('input', function() {
        const amount = parseFloat(this.value) || 0;
        document.getElementById('tonGiftcoin').textContent = Math.floor(amount * 200);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ initEventListeners()
    document.getElementById('demoOpenBtn')?.addEventListener('click', toggleDemoMode);
    document.getElementById('openCaseBtn')?.addEventListener('click', openCase);
    document.getElementById('quickOpenBtn')?.addEventListener('click', () => {
        selectedCount = 3;
        openCase();
    });
    document.getElementById('increaseCount')?.addEventListener('click', () => changeCount(1));
    document.getElementById('decreaseCount')?.addEventListener('click', () => changeCount(-1));
    document.getElementById('backToCaseBtn')?.addEventListener('click', backToCase);

    // –í initEventListeners() –¥–æ–±–∞–≤—å—Ç–µ:
    document.getElementById('backToCaseBtn')?.addEventListener('click', () => {
        document.getElementById('caseOpenSection').classList.remove('hidden');
        document.getElementById('caseResultSection').classList.add('hidden');
    });

    document.getElementById('keepItemBtn')?.addEventListener('click', keepItem);
    document.getElementById('sellItemBtn')?.addEventListener('click', sellItem);
    
    // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('winModal')?.addEventListener('click', function(e) {
        if (e.target === this) {
            const itemsTrack = document.getElementById('caseItemsTrack');
            if (itemsTrack) {
                itemsTrack.classList.remove('roulette-animation');
            }
        }
    });

    document.querySelectorAll('.case-card').forEach(card => {
        card.addEventListener('mousemove', (e) => {
            const rect = card.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            card.style.setProperty('--mouse-x', `${x}px`);
            card.style.setProperty('--mouse-y', `${y}px`);
        });
    });
}

// ==================== Global Functions ====================
window.openTab = openTab;
window.openDepositModal = openDepositModal;
window.closeDepositModal = closeDepositModal;
window.switchDepositTab = switchDepositTab;
window.processTonDeposit = processTonDeposit;
window.processStarsDeposit = processStarsDeposit;
window.keepItem = keepItem;
window.sellItem = sellItem;

// ==================== Start Application ====================
document.addEventListener('DOMContentLoaded', function() {
    initEventListeners();
    initApp();
});