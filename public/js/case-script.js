// case-script.js
let currentCase = null;
let caseItems = [];
let selectedCount = 1;
let isDemoMode = false;
let wonItem = null;

document.addEventListener('DOMContentLoaded', async () => {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const caseId = urlParams.get('id');
        
        if (!caseId) {
            throw new Error('ID –∫–µ–π—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        
        await loadCasePage(caseId);
        initCaseButtons();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showToast(error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "error");
        setTimeout(() => window.location.href = 'index.html', 2000);
    }
});

async function loadCasePage(caseId) {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const [caseResponse, itemsResponse] = await Promise.all([
            apiRequest(`/users/case/${caseId}`),
            apiRequest(`/users/case/${caseId}/items`)
        ]);
        
        if (!caseResponse.success || !itemsResponse.success) {
            throw new Error(caseResponse.error || itemsResponse.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        currentCase = caseResponse.case;
        caseItems = itemsResponse.items;
        
        renderCasePage();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–∞:', error);
        throw error;
    }
}

function renderCasePage() {
    if (!currentCase) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
    document.getElementById('casePrice').textContent = `${currentCase.price} ü™ô`;
    document.getElementById('totalCost').textContent = currentCase.price * selectedCount;
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Å–µ—Ç–∫–∏
    const itemsGrid = document.getElementById('caseItemsGrid');
    if (itemsGrid) {
        itemsGrid.innerHTML = caseItems.map(item => `
            <div class="case-item" data-rarity="${item.rarity}">
                <div class="item-image" style="background-image: url('${item.image_url || ''}')">
                    ${!item.image_url ? `<i class="fas fa-box-open"></i>` : ''}
                </div>
                <div class="item-info">
                    <h4>${item.name}</h4>
                    <p class="item-rarity ${item.rarity}">
                        ${getRarityName(item.rarity)}
                    </p>
                    <p class="item-chance">
                        –®–∞–Ω—Å: ${item.drop_chance}%
                    </p>
                </div>
            </div>
        `).join('');
    }
}

async function openCase() {
    if (!currentCase) return;

    const openBtn = document.getElementById('openCaseBtn');
    if (openBtn) openBtn.disabled = true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if (!isDemoMode && balance < currentCase.price * selectedCount) {
        showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", "error");
        openBtn.disabled = false;
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    const staticView = document.getElementById('caseStaticView');
    const rouletteView = document.getElementById('caseRouletteView');
    const track = document.getElementById('rouletteTrack');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
    staticView.classList.add('hidden');
    rouletteView.classList.remove('hidden');
    track.innerHTML = '';
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
        const response = await apiRequest('/cases/open', 'POST', {
            case_id: currentCase.id,
            count: selectedCount,
            is_demo: isDemoMode
        });
        
        if (!response.success) {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');
        }
        
        const wonItems = response.items || [];
        if (wonItems.length === 0) {
            throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã');
        }
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        const targetItem = wonItems[0];
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ—Ä–æ–∂–∫—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        const rouletteItems = [];
        for (let i = 0; i < 5; i++) {
            rouletteItems.push(...[...caseItems].sort(() => Math.random() - 0.5));
        }
        rouletteItems.push(targetItem);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        track.style.width = `${rouletteItems.length * 140}px`;
        rouletteItems.forEach((item, index) => {
            const itemEl = document.createElement('div');
            itemEl.className = `roulette-item ${item.rarity}`;
            itemEl.style.backgroundImage = item.image_url ? `url('${item.image_url}')` : '';
            itemEl.innerHTML = !item.image_url ? `<i class="fas fa-gift"></i>` : '';
            if (index === rouletteItems.length - 1) {
                itemEl.dataset.winning = 'true';
            }
            track.appendChild(itemEl);
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
        const itemWidth = 140;
        const itemsPerScreen = 3;
        const centerOffset = Math.floor(itemsPerScreen / 2) * itemWidth;
        const targetPosition = (rouletteItems.length - 3) * itemWidth - centerOffset;
        
        track.style.transform = 'translateX(0)';
        track.style.transition = 'none';
        void track.offsetWidth;
        
        track.style.transition = 'transform 4s cubic-bezier(0.19, 1, 0.22, 1)';
        track.style.transform = `translateX(-${targetPosition}px)`;
        
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setTimeout(() => {
            showWinModal(targetItem);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const checkModalClose = setInterval(() => {
                if (!document.getElementById('winModal').classList.contains('active')) {
                    clearInterval(checkModalClose);
                    staticView.classList.remove('hidden');
                    rouletteView.classList.add('hidden');
                    track.style.transform = 'translateX(0)';
                    track.style.transition = 'none';
                    if (openBtn) openBtn.disabled = false;
                }
            }, 100);
        }, 4000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
        showToast(error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞", "error");
        staticView.classList.remove('hidden');
        rouletteView.classList.add('hidden');
        if (openBtn) openBtn.disabled = false;
    }
}

function showWinModal(item) {
    const modal = document.getElementById('winModal');
    if (!modal || !item) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    document.getElementById('wonItemName').textContent = item.name;
    document.getElementById('wonItemPrice').textContent = item.price;
    document.getElementById('wonItemRarity').textContent = getRarityName(item.rarity);
    document.getElementById('wonItemRarity').className = `rarity ${item.rarity}`;
    
    const imgElement = document.getElementById('wonItemImage');
    if (item.image_url) {
        imgElement.src = item.image_url;
        imgElement.style.display = 'block';
    } else {
        imgElement.style.display = 'none';
        document.querySelector('.prize-item').innerHTML = `<i class="fas fa-gift"></i>`;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
    const sellPrice = Math.floor((item.price || 0) * 0.7);
    document.getElementById('sellPrice').textContent = sellPrice;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const prizeItem = document.querySelector('.prize-item');
    prizeItem.className = 'prize-item';
    prizeItem.classList.add(item.rarity);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.classList.add('active');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (item.rarity === 'legendary') {
        createConfetti();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    wonItem = item;
}

function createConfetti() {
    const container = document.querySelector('.confetti-container');
    container.innerHTML = '';
    
    const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
    const count = 100;
    
    for (let i = 0; i < count; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = `${Math.random() * 100}%`;
        confetti.style.top = '-10px';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
        confetti.style.opacity = '0';
        
        container.appendChild(confetti);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è
        const animation = confetti.animate([
            { 
                top: '-10px',
                opacity: 0,
                transform: `rotate(${Math.random() * 360}deg) scale(0.5)`
            },
            { 
                top: `${10 + Math.random() * 80}%`,
                opacity: 1,
                transform: `rotate(${Math.random() * 360}deg) scale(1)`
            },
            { 
                top: '110%',
                opacity: 0,
                transform: `rotate(${Math.random() * 360}deg) scale(0.5)`
            }
        ], {
            duration: 2000 + Math.random() * 3000,
            delay: Math.random() * 1000,
            easing: 'cubic-bezier(0.1, 0.8, 0.2, 1)'
        });
        
        animation.onfinish = () => confetti.remove();
    }
}

function selectItemWithChance(items) {
    // –°–æ–∑–¥–∞–µ–º "–ª–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã" —Å —É—á–µ—Ç–æ–º —à–∞–Ω—Å–æ–≤
    const lotteryTickets = [];
    items.forEach(item => {
        const chance = item.drop_chance || 1;
        for (let i = 0; i < chance; i++) {
            lotteryTickets.push(item);
        }
    });
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π "–±–∏–ª–µ—Ç"
    const randomIndex = Math.floor(Math.random() * lotteryTickets.length);
    return lotteryTickets[randomIndex];
}

function getRarityName(rarity) {
    const names = {
        'common': '–û–±—ã—á–Ω—ã–π',
        'rare': '–†–µ–¥–∫–∏–π',
        'epic': '–≠–ø–∏—á–µ—Å–∫–∏–π',
        'legendary': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
    };
    return names[rarity] || rarity;
}

async function keepItem() {
    closeWinModal();
    showToast(`–ü—Ä–µ–¥–º–µ—Ç "${wonItem.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é`, "success");
    wonItem = null;
}

async function sellItem() {
    if (!wonItem) return;
    
    const sellPrice = Math.floor(wonItem.price * 0.7);
    const success = await updateBalance(
        sellPrice,
        'sell',
        `–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: ${wonItem.name}`
    );
    
    if (success) {
        closeWinModal();
        showToast(`–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω –∑–∞ ${sellPrice} ü™ô`, "success");
        wonItem = null;
    } else {
        showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞", "error");
    }
}

function closeWinModal() {
    const modal = document.getElementById('winModal');
    modal.classList.remove('active');
    wonItem = null;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.keepItem = keepItem;
window.sellItem = sellItem;