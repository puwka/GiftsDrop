// case-script.js
let currentCase = null;
let caseItems = [];
let selectedCount = 1;
let isDemoMode = false;
let wonItem = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function initCaseButtons() {
    document.getElementById('demoOpenBtn').addEventListener('click', toggleDemoMode);
    document.getElementById('openCaseBtn').addEventListener('click', openCase);
    document.getElementById('quickOpenBtn').addEventListener('click', () => {
        selectedCount = 3;
        updateOpenButtons();
        openCase();
    });
    document.getElementById('increaseCount').addEventListener('click', () => changeCount(1));
    document.getElementById('decreaseCount').addEventListener('click', () => changeCount(-1));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞
async function loadCasePage(caseId) {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const [caseResponse, itemsResponse] = await Promise.all([
            apiRequest(`/users/case/${caseId}`),
            apiRequest(`/users/case/${caseId}/items`)
        ]);
        
        if (!caseResponse.success || !itemsResponse.success) {
            throw new Error(caseResponse.error || itemsResponse.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        currentCase = caseResponse.case;
        caseItems = itemsResponse.items;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —à–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        normalizeDropChances();
        
        renderCasePage();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–∞:', error);
        throw error;
    }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–Ω—Å–æ–≤ –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
function normalizeDropChances() {
    if (!caseItems.length) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å (–µ—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —Ä–∞–≤–Ω–∞ 100)
    const totalChance = caseItems.reduce((sum, item) => sum + (item.drop_chance || item.adjusted_chance || 0), 0);
    
    if (totalChance !== 100) {
        caseItems.forEach(item => {
            item.drop_chance = ((item.drop_chance || item.adjusted_chance || 1) / totalChance * 100).toFixed(2);
        });
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞
function renderCasePage() {
    if (!currentCase) return;
    
    document.getElementById('casePrice').textContent = `${currentCase.price} ü™ô`;
    updateTotalCost();

    const itemsGrid = document.getElementById('caseItemsGrid');
    if (itemsGrid) {
        itemsGrid.innerHTML = caseItems.map(item => `
            <div class="case-item" data-rarity="${item.rarity || 'common'}">
                <div class="item-image" style="background-image: url('${item.image_url || ''}')">
                    ${!item.image_url ? `<i class="fas fa-gift"></i>` : ''}
                </div>
                <div class="item-info">
                    <h4>${item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
                    <p class="item-rarity ${item.rarity || 'common'}">
                        ${getRarityName(item.rarity)}
                    </p>
                    <p class="item-chance">
                        –®–∞–Ω—Å: ${item.drop_chance || '0.00'}%
                    </p>
                </div>
            </div>
        `).join('');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
let isAnimationRunning = false;

async function openCase() {
    if (isAnimationRunning || !currentCase) return;
    isAnimationRunning = true;

    const openBtn = document.getElementById('openCaseBtn');
    if (openBtn) openBtn.disabled = true;

    try {
        const requestData = {
            user_id: currentUser?.id || null,
            case_id: currentCase.id,
            is_demo: isDemoMode
        };

        const response = await apiRequest('/users/open-case', 'POST', requestData);
        if (!response.success) throw new Error(response.error || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');

        await showCaseOpeningAnimation(response.items[0]);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
        showToast(error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞", "error");
    } finally {
        isAnimationRunning = false;
        if (openBtn) openBtn.disabled = false;
    }
}

async function showCaseOpeningAnimation(item) {
    const staticView = document.getElementById('caseStaticView');
    const rouletteView = document.getElementById('caseRouletteView');
    const track = document.getElementById('rouletteTrack');

    // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    staticView.classList.add('hidden');
    rouletteView.classList.remove('hidden');
    track.innerHTML = '';

    // 2. –°–æ–∑–¥–∞–µ–º –¥–æ—Ä–æ–∂–∫—É —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    const rouletteItems = [];
    const spinUpItems = 15; // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–≥–æ–Ω–∞
    const mainSpinItems = 50; // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const slowDownItems = 15; // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è

    // –§–∞–∑–∞ —Ä–∞–∑–≥–æ–Ω–∞
    for (let i = 0; i < spinUpItems; i++) {
        rouletteItems.push(caseItems[Math.floor(Math.random() * caseItems.length)]);
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–∞–∑–∞
    for (let i = 0; i < mainSpinItems; i++) {
        rouletteItems.push(caseItems[Math.floor(Math.random() * caseItems.length)]);
    }

    // –§–∞–∑–∞ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è (–ø–æ–≤—Ç–æ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
    const lastItems = [];
    for (let i = 0; i < slowDownItems - 5; i++) {
        lastItems.push(caseItems[Math.floor(Math.random() * caseItems.length)]);
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–º
    for (let i = 5; i > 0; i--) {
        lastItems.push(caseItems[Math.floor(Math.random() * caseItems.length)]);
    }
    
    // –í—ã–∏–≥—Ä—ã—à–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    lastItems.push(item);
    rouletteItems.push(...lastItems);

    // 3. –†–µ–Ω–¥–µ—Ä–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
    track.style.width = `${rouletteItems.length * 140}px`;
    rouletteItems.forEach((item, index) => {
        const itemEl = document.createElement('div');
        itemEl.className = `roulette-item ${item.rarity}`;
        
        if (item.image_url) {
            itemEl.style.backgroundImage = `url('${item.image_url}')`;
        } else {
            itemEl.innerHTML = '<i class="fas fa-gift"></i>';
        }
        
        if (index === rouletteItems.length - 1) {
            itemEl.dataset.winning = 'true';
            itemEl.classList.add('winning-item');
        }
        
        track.appendChild(itemEl);
    });

    // 4. –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ–º
    await new Promise(resolve => {
        const startTime = Date.now();
        const totalDuration = 4000; // 4 —Å–µ–∫—É–Ω–¥—ã –æ–±—â–µ–µ –≤—Ä–µ–º—è
        const startSpeed = 0.3;
        const endSpeed = 0.02;
        
        let currentPosition = 0;
        const targetPosition = track.scrollWidth - rouletteView.clientWidth;
        
        const animate = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / totalDuration, 1);
            
            // –ö—Ä–∏–≤–∞—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
            const speed = startSpeed + (endSpeed - startSpeed) * Math.pow(progress, 0.5);
            currentPosition += speed * (targetPosition - currentPosition);
            
            track.style.transform = `translateX(-${currentPosition}px)`;
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                // –¢–æ—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                const finalPosition = track.scrollWidth - rouletteView.clientWidth - 140;
                track.style.transition = 'transform 0.5s cubic-bezier(0.1, 0.8, 0.2, 1)';
                track.style.transform = `translateX(-${finalPosition}px)`;
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(resolve, 600);
            }
        };
        
        track.style.transition = 'none';
        requestAnimationFrame(animate);
    });

    // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–∏–≥—Ä—ã—à–∞
    showWinModal(item);
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ case-script.js
function createConfetti() {
    const container = document.querySelector('.confetti-container');
    if (!container) return;
    
    container.innerHTML = '';
    
    for (let i = 0; i < 100; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç
        const colors = ['#f1c40f', '#e74c3c', '#3498db', '#2ecc71', '#9b59b6'];
        const color = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.background = color;
        
        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è
        confetti.style.left = `${Math.random() * 100}%`;
        confetti.style.top = `${Math.random() * 100}%`;
        confetti.style.opacity = '1';
        confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è
        confetti.style.animation = `fall ${Math.random() * 3 + 2}s linear forwards`;
        
        container.appendChild(confetti);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Ä–æ–∂–∫–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏
function createRouletteTrack(targetItem) {
    const track = document.getElementById('rouletteTrack');
    track.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—É—é –¥–æ—Ä–æ–∂–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    const rouletteItems = [];
    for (let i = 0; i < 80; i++) {
        const randomItem = caseItems[Math.floor(Math.random() * caseItems.length)];
        rouletteItems.push(randomItem);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–æ–Ω–µ—Ü
    rouletteItems.push(targetItem);
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥–º–µ—Ç—ã
    track.style.width = `${rouletteItems.length * 140}px`;
    rouletteItems.forEach((item, index) => {
        const itemEl = document.createElement('div');
        itemEl.className = `roulette-item ${item.rarity}`;
        
        if (item.image_url) {
            itemEl.style.backgroundImage = `url('${item.image_url}')`;
        } else {
            itemEl.innerHTML = '<i class="fas fa-gift"></i>';
        }
        
        if (index === rouletteItems.length - 1) {
            itemEl.dataset.winning = 'true';
            itemEl.style.border = '2px solid gold';
            itemEl.style.boxShadow = '0 0 20px gold';
        }
        
        track.appendChild(itemEl);
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const itemWidth = 140;
    const itemsPerScreen = 3;
    const centerOffset = Math.floor(itemsPerScreen / 2) * itemWidth;
    const targetPosition = (rouletteItems.length - 3) * itemWidth - centerOffset;
    
    // –°–±—Ä–æ—Å –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
    track.style.transform = 'translateX(0)';
    track.style.transition = 'none';
    void track.offsetWidth;
    
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    track.style.transition = 'transform 3.8s cubic-bezier(0.2, 0.8, 0.3, 1)';
    track.style.transform = `translateX(-${targetPosition}px)`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function updateTotalCost() {
    if (!currentCase) return;
    document.getElementById('totalCost').textContent = currentCase.price * selectedCount;
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
function changeCount(delta) {
    const newCount = selectedCount + delta;
    if (newCount >= 1 && newCount <= 3) {
        selectedCount = newCount;
        document.getElementById('openCount').textContent = selectedCount;
        updateTotalCost();
    }
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ normalizeDropChances()
function normalizeDropChances() {
    if (!caseItems.length) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ drop_chance –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
    caseItems.forEach(item => {
        if (!item.drop_chance && item.adjusted_chance) {
            item.drop_chance = item.adjusted_chance;
        }
        item.drop_chance = parseFloat(item.drop_chance) || 1; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    });

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —à–∞–Ω—Å—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    const totalChance = caseItems.reduce((sum, item) => sum + item.drop_chance, 0);
    if (totalChance !== 100) {
        caseItems.forEach(item => {
            item.drop_chance = ((item.drop_chance / totalChance) * 100).toFixed(2);
        });
    }
}

// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
function toggleDemoMode() {
    const btn = document.getElementById('demoOpenBtn');
    isDemoMode = !isDemoMode;
    btn.classList.toggle('active', isDemoMode);
    
    showToast(
        isDemoMode ? "–î–µ–º–æ-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω" : "–î–µ–º–æ-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω", 
        isDemoMode ? "info" : "warning"
    );
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è
function updateOpenButtons() {
    document.getElementById('openCount').textContent = selectedCount;
    updateTotalCost();
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
function showWinModal(item) {
    const modal = document.getElementById('winModal');
    if (!modal || !item) return;

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.style.opacity = '0';
    modal.style.display = 'flex';
    modal.style.pointerEvents = 'none';
    
    setTimeout(() => {
        modal.style.transition = 'opacity 0.3s ease';
        modal.style.opacity = '1';
        modal.style.pointerEvents = 'all';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
        document.getElementById('wonItemName').textContent = item.name;
        document.getElementById('wonItemPrice').textContent = item.price;
        document.getElementById('wonItemRarity').textContent = getRarityName(item.rarity);
        document.getElementById('wonItemRarity').className = `rarity ${item.rarity}`;
        
        const imgElement = document.getElementById('wonItemImage');
        if (item.image_url) {
            imgElement.src = item.image_url;
            imgElement.style.display = 'block';
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if (item.rarity === 'legendary') {
            setTimeout(createConfetti, 300);
        }
    }, 100);
}

function resetCaseView() {
    const staticView = document.getElementById('caseStaticView');
    const rouletteView = document.getElementById('caseRouletteView');
    const track = document.getElementById('rouletteTrack');
    
    rouletteView.style.opacity = '1';
    staticView.style.opacity = '1';
    
    track.style.transition = 'none';
    track.style.transform = 'translateX(0)';
    track.innerHTML = '';
    
    setTimeout(() => {
        rouletteView.classList.add('hidden');
        staticView.classList.remove('hidden');
    }, 50);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
function getRarityName(rarity) {
    const names = {
        'uncommon': '–î–µ—Ñ–æ–ª—Ç',
        'common': '–û–±—ã—á–Ω—ã–π',
        'rare': '–†–µ–¥–∫–∏–π',
        'epic': '–≠–ø–∏—á–µ—Å–∫–∏–π',
        'legendary': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
    };
    return names[rarity] || rarity;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function keepItem() {
    closeWinModal();
    showToast(`–ü—Ä–µ–¥–º–µ—Ç "${wonItem.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é`, "success");
    wonItem = null;
}

async function sellItem() {
    if (!wonItem) return;
    
    const sellPrice = Math.floor(wonItem.price * 0.7);
    const success = await updateBalance(
        sellPrice,
        'sell',
        `–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: ${wonItem.name}`
    );
    
    if (success) {
        closeWinModal();
        showToast(`–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω –∑–∞ ${sellPrice} ü™ô`, "success");
        wonItem = null;
    } else {
        showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞", "error");
    }
}

function closeWinModal() {
    const modal = document.getElementById('winModal');
    modal.classList.remove('active');
    wonItem = null;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.keepItem = keepItem;
window.sellItem = sellItem;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const caseId = urlParams.get('id');
        
        if (!caseId) {
            throw new Error('ID –∫–µ–π—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        
        await loadCasePage(caseId);
        initCaseButtons();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showToast(error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "error");
        setTimeout(() => window.location.href = 'index.html', 2000);
    }
});