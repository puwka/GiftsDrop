const express = require('express');
const router = express.Router();
const { pool } = require('../db');

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
router.post('/open', async (req, res) => {
    const { userId, caseType, price } = req.body;
    
    if (!userId || !caseType) {
        return res.status(400).json({ error: 'Missing required fields' });
    }

    try {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const balanceResult = await client.query(
                'SELECT balance FROM user_balances WHERE user_id = $1 FOR UPDATE',
                [userId]
            );
            
            if (balanceResult.rows.length === 0) {
                return res.status(404).json({ error: 'User not found' });
            }
            
            const currentBalance = balanceResult.rows[0].balance;
            
            if (currentBalance < price) {
                return res.status(400).json({ error: 'Insufficient funds' });
            }
            
            // 2. –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞
            const newBalance = currentBalance - price;
            await client.query(
                'UPDATE user_balances SET balance = $1 WHERE user_id = $2',
                [newBalance, userId]
            );
            
            // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑ (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞)
            const prizeAmount = calculatePrize(caseType);
            const prizeDescription = getPrizeDescription(prizeAmount);
            
            // 4. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑ –Ω–∞ –±–∞–ª–∞–Ω—Å
            await client.query(
                'UPDATE user_balances SET balance = balance + $1 WHERE user_id = $2',
                [prizeAmount, userId]
            );
            
            // 5. –î–æ–±–∞–≤–ª—è–µ–º XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const xpToAdd = 10; // –ù–∞–ø—Ä–∏–º–µ—Ä, 10 XP –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
            await client.query(
                'UPDATE user_levels SET xp = xp + $1 WHERE user_id = $2',
                [xpToAdd, userId]
            );
            
            // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–≤—ã—Å–∏–ª—Å—è –ª–∏ —É—Ä–æ–≤–µ–Ω—å
            const levelResult = await client.query(
                'SELECT level, xp FROM user_levels WHERE user_id = $1',
                [userId]
            );
            
            const { level, xp } = levelResult.rows[0];
            const nextLevel = LEVELS.find(l => l.level === level + 1);
            let leveledUp = false;
            
            if (nextLevel && xp >= nextLevel.xpRequired) {
                await client.query(
                    'UPDATE user_levels SET level = level + 1 WHERE user_id = $1',
                    [userId]
                );
                leveledUp = true;
            }
            
            // 7. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await client.query(
                `INSERT INTO case_transactions 
                (user_id, case_type, price, prize_amount, prize_description)
                VALUES ($1, $2, $3, $4, $5)`,
                [userId, caseType, price, prizeAmount, prizeDescription]
            );
            
            await client.query('COMMIT');
            
            res.json({
                success: true,
                new_balance: newBalance + prizeAmount,
                prize_description: prizeDescription,
                leveled_up: leveledUp
            });
            
        } catch (err) {
            await client.query('ROLLBACK');
            console.error('Transaction error:', err);
            throw err;
        } finally {
            client.release();
        }
    } catch (err) {
        console.error('Error opening case:', err);
        res.status(500).json({ 
            error: 'Internal server error',
            details: err.message
        });
    }
});

function calculatePrize(caseType) {
    // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–µ–π—Å–∞
    switch (caseType) {
        case 'mix': return Math.floor(Math.random() * 200) + 50;
        case 'premium': return Math.floor(Math.random() * 500) + 200;
        case 'legendary': return Math.floor(Math.random() * 1000) + 500;
        default: return 0;
    }
}

function getPrizeDescription(amount) {
    if (amount < 100) return `–û–±—ã—á–Ω—ã–π –ø—Ä–∏–∑ (${amount} ü™ô)`;
    if (amount < 300) return `–†–µ–¥–∫–∏–π –ø—Ä–∏–∑ (${amount} ü™ô)`;
    if (amount < 700) return `–≠–ø–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–∑ (${amount} ü™ô)`;
    return `–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–∏–∑ (${amount} ü™ô)`;
}

const LEVELS = [
    { level: 1, xpRequired: 0 },
    { level: 2, xpRequired: 100 },
    { level: 3, xpRequired: 300 },
    { level: 4, xpRequired: 600 },
    { level: 5, xpRequired: 1000 }
];

module.exports = router;